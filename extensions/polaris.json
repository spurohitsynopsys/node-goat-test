{
  "adapters": [
    {
      "name": "Polaris SCM Discovery",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "scm-discovery"
        ],
        "in": [
          "github.api.url",
          "github.repository.name",
          "github.repository.owner.name",
          "github.repository.branch.name",
          "github.repository.branch.parent",
          "github.repository.pull.number",
          "bridge.log.*"
        ],
        "out": [
          "waitFor.SCMDiscovery"
        ]
      }
    },
    {
      "name": "Polaris Initializer",
      "type": "json",
      "stage": "polaris",
      "config": {
        "in": [
          "waitFor.SCMDiscovery",
          "github.repository.branch.name",
          "github.repository.branch.parent",
          "polaris.prComment.enabled",
          "polaris.triage",
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.application.name",
          "polaris.project.name",
          "polaris.assessment.types",
          "polaris.branch.name",
          "polaris.branch.parent.name",
          "polaris.onboarding",
          "bridge.log.*"
        ],
        "out": [
          "polaris.test.sast.id",
          "polaris.test.sast.streamId",
          "polaris.test.sca.id",
          "polaris.project.id",
          "polaris.branch.id",
          "polaris.branch.parent.id",
          "polaris.portfolioid"
        ],
        "command": [
          "polaris-initializer"
        ]
      }
    },
    {
      "name": "Polaris Controller",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "polaris-controller"
        ],
        "in": [
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.test.sast.id",
          "polaris.test.sca.id",
          "polaris.artifacts.coverity.path",
          "polaris.prComment.enabled",
          "tool.install.directory",
          "coverity.version",
          "blackduck.version",
          "bridge.log.*"
        ],
        "out": [
          "coverity.id",
          "coverity.completed",
          "blackduck.id",
          "polaris.artifacts.blackduck.path"
        ]
      }
    },
    {
      "name": "Polaris Artifacts Uploader",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "polaris-artifacts-uploader"
        ],
        "in": [
          "coverity.id",
          "coverity.completed",
          "blackduck.id",
          "blackduck.completed",
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.test.sast.id",
          "polaris.test.sca.id",
          "polaris.artifacts.coverity.path",
          "polaris.artifacts.blackduck.path",
          "bridge.log.*"
        ],
        "out": [
          "polaris.artifacts.coverity.uploadSuccessful",
          "polaris.artifacts.blackduck.uploadSuccessful"
        ]
      }
    },
    {
      "name": "Polaris Waiter",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "polaris-waiter"
        ],
        "in": [
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.test.sast.id",
          "polaris.test.sca.id",
          "polaris.test.sast.pollTime",
          "polaris.test.sca.pollTime",
          "polaris.artifacts.coverity.uploadSuccessful",
          "polaris.artifacts.blackduck.uploadSuccessful",
          "bridge.log.*"
        ],
        "out": [
          "polaris.test.sast.completed",
          "polaris.test.sca.completed"
        ]
      }
    },
    {
      "name": "Polaris Issues Fetcher",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "polaris-issues-fetcher"
        ],
        "in": [
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.project.id",
          "polaris.test.sast.id",
          "polaris.test.sca.id",
          "polaris.test.sast.completed",
          "polaris.test.sca.completed",
          "bridge.log.*"
        ],
        "out": [
          "polaris.test.sast.issues.minimal",
          "polaris.test.sast.issues.critical",
          "polaris.test.sast.issues.low",
          "polaris.test.sast.issues.medium",
          "polaris.test.sast.issues.high",
          "polaris.test.sca.issues.minimal",
          "polaris.test.sca.issues.critical",
          "polaris.test.sca.issues.low",
          "polaris.test.sca.issues.medium",
          "polaris.test.sca.issues.high"
        ]
      }
    },
    {
      "name": "Polaris Policy Checker",
      "type": "json",
      "stage": "polaris",
      "config": {
        "command": [
          "polaris-policy-checker"
        ],
        "in": [
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.test.sast.id",
          "polaris.test.sca.id",
          "polaris.test.sast.completed",
          "polaris.test.sca.completed",
          "bridge.log.*"
        ],
        "out": [
          "bridge.break"
        ]
      }
    },
    {
      "name": "Polaris Results",
      "type": "json",
      "stage": "polaris-results",
      "config": {
        "command": [
          "polaris-results"
        ],
        "in": [
          "polaris.serverUrl",
          "polaris.accessToken",
          "polaris.project.id",
          "polaris.branch.id",
          "polaris.branch.parent.id",
          "polaris.test.sast.completed",
          "polaris.test.sca.completed",
          "polaris.prComment.enabled",
          "polaris.prComment.severities",
          "bridge.log.*"
        ],
        "out": [
          "commenter.issues"
        ]
      }
    },
    {
      "name": "Create Polaris Project & Branch By Default",
      "type": "default",
      "stage": "polaris",
      "config": {
        "set": {
          "key": "polaris.onboarding",
          "value": true
        }
      }
    }
  ],
  "schema": {
    "github.api.url": {
      "description": "API URL for Github",
      "type": "string"
    },
    "github.repository.name": {
      "description": "Name of the Github repository",
      "type": "string"
    },
    "github.repository.owner.name": {
      "description": "Owner name for the Github repository",
      "type": "string"
    },
    "github.repository.branch.name": {
      "description": "Branch name for the Github repository",
      "type": "string"
    },
    "github.repository.branch.parent": {
      "description": "Parent branch of the branch provided in the Github repository",
      "type": "string"
    },
    "github.repository.pull.number": {
      "description": "The GitHub pull request number of the current run",
      "type": "int"
    },
    "environment.scan.pull": {
      "description": "A boolean represents if the pipeline is triggered by a MR/PR event",
      "type": "bool"
    },
    "waitFor.SCMDiscovery": {
      "description": "Wait resource for SCM discovery adapter",
      "type": "bool"
    },
    "polaris.serverUrl": {
      "description": "Server url of Polaris service",
      "type": "string"
    },
    "polaris.accessToken": {
      "description": "Access token required for Polaris server authentication",
      "isSensitive": true,
      "type": "string"
    },
    "polaris.application.name": {
      "description": "Application name created in Polaris server",
      "type": "string"
    },
    "polaris.project.name": {
      "description": "Project name created in Polaris server",
      "type": "string"
    },
    "polaris.branch.name": {
      "description": "Branch name for the project created in Polaris server",
      "type": "string"
    },
    "polaris.branch.parent.name": {
      "description": "Parent Branch name for the project created in Polaris server",
      "type": "string"
    },
    "polaris.branch.id": {
      "description": "Branch id of the project branch in Polaris server",
      "type": "string"
    },
    "polaris.branch.parent.id": {
      "description": "Branch id of the project's parent branch in Polaris server",
      "type": "string"
    },
    "polaris.onboarding": {
      "description": "If true, creates project and branch if they don't exist. Defaults to true",
      "type": "bool"
    },
    "polaris.triage": {
      "description": "Controls the triage behavior of the test",
      "type": "string"
    },
    "polaris.project.id": {
      "description": "Project id created in Polaris server for the given project",
      "type": "string"
    },
    "polaris.assessment.types": {
      "description": "Assessment types for which user wants to run tests for.",
      "type": "[]string"
    },
    "polaris.artifacts.coverity.path": {
      "description": "path of the coverity artifacts to be uploaded for analysis",
      "type": "string"
    },
    "polaris.artifacts.coverity.uploadSuccessful": {
      "description": "Flag specifying the coverity artifact was uploaded successfully",
      "type": "bool"
    },
    "polaris.artifacts.blackduck.path": {
      "description": "path of the blackduck artifacts to be uploaded for analysis",
      "type": "string"
    },
    "polaris.artifacts.blackduck.uploadSuccessful": {
      "description": "Flag specifying the blackduck artifact was uploaded successfully",
      "type": "bool"
    },
    "polaris.test.sast.id": {
      "description": "Test id for SAST assessment type",
      "type": "string"
    },
    "polaris.test.sca.id": {
      "description": "Test id for SCA assessment type",
      "type": "string"
    },
    "polaris.test.sast.pollTime": {
      "description": "poll time to wait for SAST assessment type",
      "type": "int"
    },
    "polaris.test.sca.pollTime": {
      "description": "poll time to wait for SCA assessment type",
      "type": "int"
    },
    "polaris.test.sast.completed": {
      "description": "flag indicating the completion of SAST assessment",
      "type": "bool"
    },
    "polaris.test.sca.completed": {
      "description": "flag indicating the completion of SCA assessment",
      "type": "bool"
    },
    "polaris.test.sast.issues.minimal": {
      "description": "SAST issues count for minimal severity",
      "type": "int"
    },
    "polaris.test.sca.issues.minimal": {
      "description": "SCA issues count for minimal severity",
      "type": "int"
    },
    "polaris.test.sast.issues.low": {
      "description": "SAST issues count for low severity",
      "type": "int"
    },
    "polaris.test.sca.issues.low": {
      "description": "SCA issues count for low severity",
      "type": "int"
    },
    "polaris.test.sast.issues.medium": {
      "description": "SAST issues count for medium severity",
      "type": "int"
    },
    "polaris.test.sca.issues.medium": {
      "description": "SCA issues count for medium severity",
      "type": "int"
    },
    "polaris.test.sast.issues.high": {
      "description": "SAST issues count for high severity",
      "type": "int"
    },
    "polaris.test.sca.issues.high": {
      "description": "SCA issues count for high severity",
      "type": "int"
    },
    "polaris.test.sast.issues.critical": {
      "description": "SAST issues count for critical severity",
      "type": "int"
    },
    "polaris.test.sca.issues.critical": {
      "description": "SCA issues count for critical severity",
      "type": "int"
    },
    "polaris.prComment.enabled": {
      "description": "Flag to denote whether pr comments feature is enabled or not",
      "type": "bool"
    },
    "polaris.prComment.severities": {
      "description": "List of severities for which the PR Comments should be created",
      "type": "[]string"
    },
    "downloads.coverity.url": {
      "description": "If we need to download the coverity thin client, set the value of this resource to the Download URL for the payload",
      "type": "string"
    },
    "downloads.coverity.path": {
      "description": "Coverity related artifacts downloaded path",
      "type": "string"
    },
    "coverity.install.directory": {
      "description": "If given, this is where we will look to see if coverity is installed.",
      "type": "string"
    },
    "coverity.idir.path": {
      "description": "The path where Coverity CLI needs to generate intermediate directory",
      "type": "string"
    },
    "coverity.execution.path": {
      "description": "If the correct version of coverity is already installed, set the value of this resource to the path of the coverity thin client.",
      "type": "string"
    },
    "coverity.id": {
      "description": "tool id of coverity tool used",
      "type": "string"
    },
    "coverity.version": {
      "description": "Tool version of Coverity to be used.",
      "type": "string"
    },
    "coverity.completed": {
      "description": "flag indicating whether the coverity capture happened successfully or not",
      "type": "bool"
    },
    "downloads.blackduck.url": {
      "description": "Blackduck detect jar archive download URL",
      "type": "string"
    },
    "downloads.blackduck.path": {
      "description": "Blackduck detect jar archive path",
      "type": "string"
    },
    "blackduck.install.directory": {
      "description": "User supplied install directory for Blackduck",
      "type": "string"
    },
    "blackduck.execution.path": {
      "description": "Blackduck detect jar file path",
      "type": "string"
    },
    "blackduck.id": {
      "description": "tool id of blackduck tool used",
      "type": "string"
    },
    "blackduck.version": {
      "description": "Tool version of Blackduck to be used.",
      "type": "string"
    },
    "blackduck.completed": {
      "description": "Flag indicating whether the blackduck execution happened successfully or not",
      "type": "bool"
    },
    "polaris.test.sast.streamId": {
      "description": "Id of the coverity stream for caching",
      "type": "string"
    },
    "tool.install.directory": {
      "description": "install directory which can also be specified by the user. If not specified bridge will set it to bridge default directory",
      "type": "string"
    },
    "project.directory": {
      "description": "Project source code directory",
      "type": "string"
    },
    "polaris.portfolioid": {
      "description": "Polaris Portfolio Id",
      "type": "string"
    }
  }
}
